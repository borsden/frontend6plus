{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EQUITIES","Map","Object","entries","equities_raw","map","_ref","_ref2","slicedToArray","opps","equity","wins","values","predict","max","Math","apply","min","middle","reduce","a","b","length","_ref3","_ref4","hand","player_ranks","opp_ranks","win","lose","tie","VALS","floatedVal","val","parseFloat","toFixed","App","state","selected","_this2","this","pred","get","react_default","createElement","className","key","row_val","first_i","col_val","second_i","isSuit","name","isSuited","toEquityName","predCurrent","onClick","setState","style","backgroundColor","concat","value","onChange","e","target","v","parseInt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAKMA,EAAW,IAAIC,IACnBC,OACGC,QAAQC,GACRC,IACC,SAAAC,GAAoB,IAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAI,EAAA,GAAlBG,EAAkBF,EAAA,GAAZG,EAAYH,EAAA,GAEhBI,EAAOT,OAAOU,OAAOF,GAAQL,IAAI,SAAAQ,GAAO,OAAIA,EAAQ,KACpDC,EAAMC,KAAKD,IAAIE,MAAMD,KAAMJ,GAC3BM,EAAMF,KAAKE,IAAID,MAAMD,KAAMJ,GAC3BO,EAASP,EAAKQ,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,GAAG,GAAKV,EAAKW,OAElD,MAAO,CACLb,EACA,IAAIR,IACFC,OAAOC,QAAQO,GACZL,IACC,SAAAkB,GAAA,IAAAC,EAAAtB,OAAAM,EAAA,EAAAN,CAAAqB,EAAA,GAAEE,EAAFD,EAAA,GAAQX,EAARW,EAAA,SAAqB,CACnBC,EACA,CACEC,aAAcb,EAAQ,GACtBc,UAAWd,EAAQ,GACnBe,IAAKf,EAAQ,GACbgB,KAAMhB,EAAQ,GACdiB,IAAKjB,EAAQ,GACbC,MACAG,MACAC,kBASda,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAShDC,EAAa,SAACC,GAAD,OAA4B,IAAlBC,WAAWD,IAAYE,QAAQ,IA6H7CC,6MAzHbC,MAAQ,CACN5B,KAAM,IACN6B,SAAU,8EAGH,IAAAC,EAAAC,KACDC,EAAOD,KAAKH,MAAMC,UAAYtC,EAAS0C,IAAIF,KAAKH,MAAM5B,MAAMiC,IAAIF,KAAKH,MAAMC,UACjF,OACEK,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,OACbF,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,YACbF,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,SAEbd,EAAK1B,IAAI,SAAA4B,GAAG,OAAKU,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,gBAAgBC,IAAKb,GAAMA,KAG3DF,EAAK1B,IACH,SAAC0C,EAASC,GAAV,MAAuB,CACrBL,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,OAAOC,IAAKC,GAAUA,GACrChB,EAAK1B,IAAI,SAAC4C,EAASC,GAAV,OACPP,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,YAAYC,IAAKC,EAAUE,GAEtC,EAAC,GAAO,GAAM5C,IAAI,SAAA8C,GACd,IAAIA,GAAWH,IAAYE,EAA3B,CAGA,IACEE,EApCP,SAACJ,EAASE,EAAUG,GAApB,OACnBL,EAAUE,EACNnB,EAAKiB,GAAWjB,EAAKmB,KAAaG,EAClCtB,EAAKmB,GAAYnB,EAAKiB,KAAYK,EAiCLC,CAAaN,EAASE,EAAUC,GACvCI,EAAcvD,EAAS0C,IAAIH,EAAKF,MAAM5B,MAAMiC,IAAIU,GAClD,OAEET,EAAAvB,EAAAwB,cAAA,OACEE,KAAMK,EACNN,UAAWN,EAAKF,MAAMC,WAAac,GAAQ,eAC3CI,QAAS,kBAAMjB,EAAKkB,SAAS,CAACnB,SAAUc,KACxCM,MAAO,CACLC,gBACEJ,EAAY3B,IAAM2B,EAAYrC,OAA9B,kBAAA0C,QACuBL,EAAY3B,IAAM2B,EAAYrC,SAAWqC,EAAYzC,IAAMyC,EAAYrC,QAD9F,wBAAA0C,QAEwBL,EAAYrC,OAASqC,EAAY3B,MAAQ2B,EAAYrC,OAASqC,EAAYtC,KAFlG,OAMHe,EAAWuB,EAAY3B,gBAY9Ce,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,QACbF,EAAAvB,EAAAwB,cAAA,WACED,EAAAvB,EAAAwB,cAAA,0IAEED,EAAAvB,EAAAwB,cAAA,UACEC,UAAU,YACVgB,MAAOrB,KAAKH,MAAM5B,KAClBqD,SAAU,SAAAC,GAAC,OAAIxB,EAAKkB,SAAS,CAAChD,KAAMsD,EAAEC,OAAOH,UAG3C,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGxD,IACd,SAAA4D,GAAC,OAAItB,EAAAvB,EAAAwB,cAAA,UAAQiB,MAAOI,EAAGnB,IAAKmB,GAAIA,QAM1CtB,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,gBAEXJ,GACEE,EAAAvB,EAAAwB,cAAA,WACED,EAAAvB,EAAAwB,cAAA,uCACSJ,KAAKH,MAAMC,SAAS,GAD7B,KACmCE,KAAKH,MAAMC,SAAS,GADvD,KAC6D4B,SAAS1B,KAAKH,MAAMC,SAAS,IAAM,qEAAgB,4EAEhHK,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,qBACZ,CAAC,uCAAU,yDAAa,kCAASxC,IAAI,SAAA4D,GAAC,OAAItB,EAAAvB,EAAAwB,cAAA,WAAMqB,KAE/C,CAACxB,EAAKb,IAAKa,EAAKZ,KAAMY,EAAKX,KACxBzB,IAAI,SAAA4D,GAAC,OACJtB,EAAAvB,EAAAwB,cAAA,WAAMZ,EAAWiC,OAKzBtB,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,oBACbF,EAAAvB,EAAAwB,cAAA,YACC,CAAC,uCAAU,2BAAQ,8CAAY,qBAAO,iCAAS,oDAAa,2BAAQ,2BAAQ,2DAAcvC,IAAI,SAAA4D,GAAC,OAC9FtB,EAAAvB,EAAAwB,cAAA,WAAMqB,KACRtB,EAAAvB,EAAAwB,cAAA,2BAEEH,EAAKf,aACFrB,IAAI,SAAA4D,GAAC,OACJtB,EAAAvB,EAAAwB,cAAA,OAAKc,MAAO,CAACC,gBAAe,kBAAAC,OAAoB1B,WAAW+B,GAA/B,OACzBjC,EAAWiC,MAIpBtB,EAAAvB,EAAAwB,cAAA,OAAKC,UAAU,4BAAf,0DAEEJ,EAAKd,UACFtB,IAAI,SAAA4D,GAAC,OACJtB,EAAAvB,EAAAwB,cAAA,OAAKc,MAAO,CAACC,gBAAe,kBAAAC,OAAoB1B,WAAW+B,GAA/B,OACzBjC,EAAWiC,kBA3GtBE,aCxCEC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO/B,EAAAvB,EAAAwB,cAAC+B,EAAD,MAAQC,SAASC,eAAe,SD2HxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.38b533e6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport equities_raw from './equities';\n\n\nconst EQUITIES = new Map(\n  Object\n    .entries(equities_raw)\n    .map(\n      ([opps, equity]) => {\n        const\n          wins = Object.values(equity).map(predict => predict[2]),\n          max = Math.max.apply(Math, wins),\n          min = Math.min.apply(Math, wins),\n          middle = wins.reduce((a, b) => a + b, 0) / wins.length;\n\n        return [\n          opps,\n          new Map(\n            Object.entries(equity)\n              .map(\n                ([hand, predict]) => [\n                  hand,\n                  {\n                    player_ranks: predict[0],\n                    opp_ranks: predict[1],\n                    win: predict[2],\n                    lose: predict[3],\n                    tie: predict[4],\n                    max,\n                    min,\n                    middle\n                  }\n                ]\n              ))\n        ]\n      }\n    )\n);\n\nconst VALS = ['6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n\nconst toEquityName = (first_i, second_i, isSuited) => (\n  first_i < second_i\n    ? VALS[first_i] + VALS[second_i] + +isSuited\n    : VALS[second_i] + VALS[first_i] + +isSuited\n);\n\nconst floatedVal = (val) => (parseFloat(val) * 100).toFixed(2);\n\n\nclass App extends Component {\n  state = {\n    opps: \"2\",\n    selected: null\n  };\n\n  render() {\n    const pred = this.state.selected && EQUITIES.get(this.state.opps).get(this.state.selected);\n    return (\n      <div className=\"App\">\n        <div className=\"CardGrid\">\n          <div className=\"Cell\"/>\n          {\n            VALS.map(val => (<div className=\"Cell ColNames\" key={val}>{val}</div>))\n          }\n          {\n            VALS.map(\n              (row_val, first_i) => ([\n                <div className=\"Cell\" key={row_val}>{row_val}</div>,\n                VALS.map((col_val, second_i) => (\n                  <div className=\"Cell Item\" key={row_val + col_val}>\n                    {\n                      [false, true].map(isSuit => {\n                          if (isSuit &&  first_i === second_i) {\n                            return\n                          }\n                          const\n                            name = toEquityName(first_i, second_i, isSuit),\n                            predCurrent = EQUITIES.get(this.state.opps).get(name);\n                          return (\n\n                            <div\n                              key={+isSuit}\n                              className={this.state.selected === name && \"SelectedItem\"}\n                              onClick={() => this.setState({selected: name})}\n                              style={{\n                                backgroundColor: (\n                                  predCurrent.win > predCurrent.middle\n                                    ? `rgb(0, 154, 4, ${(predCurrent.win - predCurrent.middle) / (predCurrent.max - predCurrent.middle)})`\n                                    : `rgb(126, 0, 16, ${(predCurrent.middle - predCurrent.win) / (predCurrent.middle - predCurrent.min)})`\n                                )\n                              }}\n                            >\n                              {floatedVal(predCurrent.win)}\n                            </div>\n                          )\n                        }\n                      )\n                    }\n                  </div>\n                ))\n              ])\n            )\n          }\n        </div>\n        <div className=\"Info\">\n          <div>\n            <label>\n              Количество оппонентов:\n              <select\n                className=\"OppSelect\"\n                value={this.state.opps}\n                onChange={e => this.setState({opps: e.target.value})}\n              >\n                {\n                  [1, 2, 3, 4, 5].map(\n                    v => <option value={v} key={v}>{v}</option>\n                  )\n                }\n              </select>\n            </label>\n          </div>\n          <div className=\"SelectedInfo\">\n            {\n              pred && (\n                <div>\n                  <h3>\n                    Рука: {this.state.selected[0]}, {this.state.selected[1]}, {parseInt(this.state.selected[2]) ? 'Одномастные' : 'Разномастные'}\n                  </h3>\n                  <div className=\"PredictResultGrid\">\n                    {[\"Победа\", \"Поражение\", \"Ничья\"].map(v => <div>{v}</div>)}\n                    {\n                      [pred.win, pred.lose, pred.tie]\n                        .map(v => (\n                          <div>{floatedVal(v)}</div>\n                        ))\n                    }\n\n                  </div>\n                  <div className=\"PredictRanksGrid\">\n                    <div/>\n                    {[\"Ничего\", \"Пара\", \"Две пары\", \"Сет\", \"Стрит\", \"Фулл хаус\", \"Флеш\", \"Каре\", \"Стрит флеш\"].map(v =>\n                      <div>{v}</div>)}\n                    <div>Вы</div>\n                    {\n                      pred.player_ranks\n                        .map(v => (\n                          <div style={{backgroundColor: `rgb(0, 154, 4, ${parseFloat(v)})`}}>\n                            {floatedVal(v)}\n                          </div>\n                        ))\n                    }\n                    <div className=\"PredictRanksGridOppLabel\">Оппоненты</div>\n                    {\n                      pred.opp_ranks\n                        .map(v => (\n                          <div style={{backgroundColor: `rgb(0, 154, 4, ${parseFloat(v)})`}}>\n                            {floatedVal(v)}\n                          </div>\n                        ))\n                    }\n                  </div>\n                </div>\n              )\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}